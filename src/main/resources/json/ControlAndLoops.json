[
  {
    "name": "Assign",
    "groupName": "Control and Loops",
    "documentation": "With this you can create a new Variable, or replace an existing Variable. Note that only top-level Variables can be created/replaced (i.e. you can't create/replace <span>some_hash.subvar</span>, but <span>some_hash</span>).",
    "insertRule": "insert",
    "parameters": [
      "Name",
      "Assignment operator",
      "Value"
    ],
    "example": "<#assign name1 = value1>\n<#assign seq = [\"foo\", \"bar\", \"baz\"]>",
    "template": "<#assign name1 = value1>\n"
  },
  {
    "name": "Attempt, recover",
    "groupName": "Control and Loops",
    "documentation": "These directives are used if you want the page successfully outputted even if the outputting of a certain part of the page fails. If an error occurs during the execution of the <span><em>attempt block</em></span>, then the output of the <span><em>attempt block</em></span> is rolled back (and the error is logged, with the default configuration at least), and the <span><em>recover block</em></span> is executed instead, then template execution continues normally after the <span><em>recover block</em></span>. If no error occurs during the execution of the <span><em>attempt block</em></span>, then the <span><em>recover block</em></span> is ignored.",
    "insertRule": "insert",
    "parameters": [
      "attempt block",
      "recover block"
    ],
    "example": "<#attempt>\n  Optional content.\n<#recover>\n  Ops! The optional content is not available.\n</#attempt>",
    "template": "<#attempt>\n  attempt block\n<#recover>\n  recover block\n</#attempt>\n"
  },
  {
    "name": "Function, return",
    "groupName": "Control and Loops",
    "documentation": "Creates a method Variable (in the current namespace, if you know namespace feature). <span>Return</span> directive must have a parameter that specifies the return value of the method, and that attempts to write to the output will be ignored. If the <span><em></#function></span><em> is reached (i.e. there was no <span>return <em>returnValue</em></span>), then the return value of the method is an undefined Variable.",
    "insertRule": "insert",
    "parameters": "<ul><li><span>name</span>: name of method Variable (not expression).</li><li><span>param1, param2, ...etc.</span>: the name of the local Variables store the parameter values (not expression);</li><li><span>returnValue</span>: the expression that calculates the value of the method call.</li></ul>",
    "example": "<#function avg x y>\n  <#return (x + y) / 2>\n</#function>\n${avg(10, 20)}",
    "template": "<#function name param1 param2 ... paramN>\n  ...\n  <#return returnValue>\n  ...\n</#function>\n"
  },
  {
    "name": "If, else, elseif",
    "groupName": "Control and Loops",
    "documentation": "You can use <span>if, elseif</span> and <span>else</span> directives to conditionally skip a section of the template. The <span><em>condition</em></span>-s must evaluate to a boolean value, or else an error will abort template processing. The <span>elseif</span>-s and <span>else</span>-s must occur inside <span>if</span>(that is, between the <span>if</span> start-tag and end-tag). The <span>if</span> can contain any number of <span>elseif</span>-s (including 0) and at the end optionally one <span>else</span>.",
    "insertRule": "insert",
    "parameters": "<ul><li><span>condition, condition2, ...etc.</span>:Expression evaluates to a boolean value.</li></ul>",
    "example": "<#if x == 1>\n  x is 1\n<#else>\n  x is not 1\n</#if>",
    "template": "<#if condition>\n  ...\n<#elseif condition2>\n  ...\n...\n<#else>\n  ...\n</#if>\n"
  },
  {
    "name": "List",
    "groupName": "Control and Loops",
    "documentation": "The list directive executes the code between the list start-tag and list end-tag (the body of list from now on) for each value in the sequence (or collection) specified as its first parameter. For each such iteration the loop variable (user in this example) will store the value of the current item.",
    "insertRule": "insert",
    "parameters": "<ul><li><span>value, refValue1, etc.</span>: Expressions evaluates to scalars of the same type.</li></ul>",
    "example": "Assuming users contains the ['Joe', 'Kate', 'Fred'] sequence:\n<#list users as user>\n  ${user}\n</#list>",
    "output": "Joe\nKate\nFred",
    "template": "<#list sequence as item>\n    Part repeated for each item\n</#list>"
  },
  {
    "name": "Switch",
    "groupName": "Control and Loops",
    "documentation": "Switch is used to choose a fragment of template depending on the value of an expression. Inside the switch must be one or more <#case value>, and after all such case tags optionally one <#default>. When FM reaches the switch directive, it chooses a case directive where refValue equals with value and continues the processing of the template there. If there is no case directive with appropriate value then it continues processing at the default directive if that exists, otherwise it continues the processing after the end-tag of switch.",
    "insertRule": "insert",
    "parameters": "<ul><li><span>value, refValue1, etc.</span>: Expressions evaluates to scalars of the same type.</li></ul>",
    "example": "<#switch animal.size>\n  <#case \"small\">\n     This will be processed if it is small\n     <#break>\n  <#case \"medium\">\n     This will be processed if it is medium\n     <#break>\n  <#case \"large\">\n     This will be processed if it is large\n     <#break>\n  <#default>\n     This will be processed if it is neither\n</#switch>",
    "template": "<#switch value>\n  <#case refValue1>\n    ...\n    <#break>\n  <#case refValue2>\n    ...\n    <#break>\n  ...\n  <#case refValueN>\n    ...\n    <#break>\n  <#default>\n    ...\n</#switch>\n"
  }
]