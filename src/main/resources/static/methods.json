[
  {
    "name": "Assign",
    "type": "template",
    "category": "Directive Reference",
    "documentation": "With this you can create a new variable, or replace an existing variable. Note that only top-level variables can be created/replaced (i.e. you can't create/replace <span>some_hash.subvar</span>, but <span>some_hash</span>).",
    "insertRule": "insert",
    "parameters": [
      "Name",
      "Assignment operator",
      "Value"
    ],
    "example": "<#assign name1 = value1>\n<#assign seq = [\"foo\", \"bar\", \"baz\"]>",
    "template": "<#assign name1 = value1>\n"
  },

  {
    "name": "Attempt, recover",
    "type": "template",
    "category": "Directive Reference",
    "documentation": "These directives are used if you want the page successfully outputted even if the outputting of a certain part of the page fails. If an error occurs during the execution of the <span><em>attempt block</em></span>, then the output of the <span><em>attempt block</em></span> is rolled back (and the error is logged, with the default configuration at least), and the <span><em>recover block</em></span> is executed instead, then template execution continues normally after the <span><em>recover block</em></span>. If no error occurs during the execution of the <span><em>attempt block</em></span>, then the <span><em>recover block</em></span> is ignored.",
    "insertRule": "insert",
    "parameters": [
      "attempt block",
      "recover block"
    ],
    "example": "<#attempt>\n  Optional content.\n<#recover>\n  Ops! The optional content is not available.\n&lt;/#attempt>",
    "template": "<#attempt>\n  attempt block\n<#recover>\n  recover block\n</#attempt>\n"
  },

  {
    "name": "Function, return",
    "type": "template",
    "category": "Directive Reference",
    "documentation": "Creates a method variable (in the current namespace, if you know namespace feature). <span>Return</span> directive must have a parameter that specifies the return value of the method, and that attempts to write to the output will be ignored. If the <span><em></#function></span><em> is reached (i.e. there was no <span>return <em>returnValue</em></span>), then the return value of the method is an undefined variable.",
    "insertRule": "insert",
    "parameters": "<ul><li><span>name</span>: name of method variable (not expression).</li><li><span>param1, param2, ...etc.</span>: the name of the local variables store the parameter values (not expression);</li><li><span>returnValue</span>: the expression that calculates the value of the method call.</li></ul>",
    "example": "<#function avg x y>\n  <#return (x + y) / 2>\n&lt;/#function>\n${avg(10, 20)}",
    "template": "<#function name param1 param2 ... paramN>\n  ...\n  <#return returnValue>\n  ...\n</#function>\n"
  },

  {
    "name": "If, else, elseif",
    "type": "template",
    "category": "Directive Reference",
    "documentation": "You can use <span>if, elseif</span> and <span>else</span> directives to conditionally skip a section of the template. The <span><em>condition</em></span>-s must evaluate to a boolean value, or else an error will abort template processing. The <span>elseif</span>-s and <span>else</span>-s must occur inside <span>if</span>(that is, between the <span>if</span> start-tag and end-tag). The <span>if</span> can contain any number of <span>elseif</span>-s (including 0) and at the end optionally one <span>else</span>.",
    "insertRule": "insert",
    "parameters": "<ul><li><span>condition, condition2, ...etc.</span>:Expression evaluates to a boolean value.</li></ul>",
    "example": "<#if x == 1>\n  x is 1\n<#else>\n  x is not 1\n&lt;/#if>",
    "template": "<#if condition>\n  ...\n<#elseif condition2>\n  ...\n...\n<#else>\n  ...\n</#if>\n"
  },

  {
    "name": "Setting",
    "type": "template",
    "category": "Directive Reference",
    "documentation": "Sets a setting for the further part of processing. Settings are values that influence the behavior of expression. The new value will be present only in the template processing where it was set, and does not touch the template itself.",
    "insertRule": "insert",
    "parameters": "<ul><li><span>name: </span>name of the setting. It is not expression!</li><li><span>value: </span>New value of the setting. Expression</li></ul>",
    "example": "<#setting name=value>",
    "template": "<#setting name=value>\n"
  }
]